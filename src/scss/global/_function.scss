@use 'sass:map';
@use 'sass:math';
@use 'sass:string';

//pxをvw/vhに変換
@function vw($size, $viewport: 750) {
  $rate: math.div(100, $viewport);
  @return $rate * $size * 1vw;
}
@function vw_lg($size, $viewport: 1366) {
  $rate: math.div(100, $viewport);
  @return $rate * $size * 1vw;
}
@function vh($size, $viewport: 1000) {
  $rate: math.div(100, $viewport);
  @return $rate * $size * 1vh;
}
@function vh_lg($size, $viewport: 800) {
  $rate: math.div(100, $viewport);
  @return $rate * $size * 1vh;
}
@function vh_fv($size, $viewport: 1334) {
  $rate: math.div(100, $viewport);
  @return $rate * $size * 1vh;
}

// pxをremに変換
@function rem($px, $basePx: 16) {
  $rate: math.div($px, $basePx);
  @return $rate * 1rem;
}

// line-height
@function lh($fontSize, $lineHeight) {
  $rate1: math.div($lineHeight, $fontSize) * 100;
  $rate2: math.round($rate1);
  @return math.div($rate2, 100);
}

// 設定値（案件ごとのデザインカンプを適用）
$base-font-size: 16;
$viewportMin: 375;
$viewportMax: 1366;

@function strip-unit($num) {
  @return math.div($num, ($num * 0 + 1));
}

@function divide-root($px) {
  @return math.div(strip-unit($px), $base-font-size);
}

@function rem($px) {
  @return divide-root($px) * 1rem;
}

// 参考：https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
@function fluid($min-size, $max-size) {
  $min-unit: rem($min-size);
  $max-unit: rem($max-size);
  $min-num: divide-root($min-size);
  $max-num: divide-root($max-size);
  $min-breakpoint: divide-root($viewportMin);
  $max-breakpoint: divide-root($viewportMax);
  $slope: math.div(($max-num - $min-num), ($max-breakpoint - $min-breakpoint));
  $calc-rem: ($min-breakpoint * -1 * $slope + $min-num) * 1rem;
  $calc-vw: ($slope * 100) * 1vw;
  @return clamp($min-unit, $calc-rem + $calc-vw, $max-unit);
}
