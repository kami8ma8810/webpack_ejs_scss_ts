@use 'sass:map';
@use 'sass:math';
@use 'sass:string';

/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
初期設定（font-size,viewport）※デザインカンプごとに変更してください。
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
$baseFontSize: 16; //ルートフォントサイズ
$viewportSpWidth: 375; //SPデザインカンプの幅
$viewportSpHeight: 800; //SPデザインカンプの高さ（MVなど）
$viewportPcWidth: 1366; //PCデザインカンプの幅
$viewportPcHeight: 768; //PCデザインカンプの高さ（MVなど）

//vw, vh で出力
@function vw($size) {
  $rate: math.div(100, $viewportSpWidth);
  @return $rate * $size * 1vw;
}
@function vw_pc($size) {
  $rate: math.div(100, $viewportPcWidth);
  @return $rate * $size * 1vw;
}
@function vh($size) {
  $rate: math.div(100, $viewportSpHeight);
  @return $rate * $size * 1vh;
}
@function vh_pc($size) {
  $rate: math.div(100, $viewportPcHeight);
  @return $rate * $size * 1vh;
}

// line-height
@function lh($fontSize, $lineHeight) {
  $rate1: math.div($lineHeight, $fontSize) * 100;
  $rate2: math.round($rate1);
  @return math.div($rate2, 100);
}

// フォントサイズ clamp
@function strip-unit($num) {
  @return math.div($num, ($num * 0 + 1));
}
@function divide-root($px) {
  @return math.div(strip-unit($px), $baseFontSize);
}
@function rem($px) {
  @return divide-root($px) * 1rem;
}
@function fluid($min-size, $max-size) {
  $min-unit: rem($min-size);
  $max-unit: rem($max-size);
  $min-num: divide-root($min-size);
  $max-num: divide-root($max-size);
  $min-breakpoint: divide-root($viewportSpWidth);
  $max-breakpoint: divide-root($viewportPcWidth);
  $slope: math.div(($max-num - $min-num), ($max-breakpoint - $min-breakpoint));
  $calc-rem: ($min-breakpoint * -1 * $slope + $min-num) * 1rem;
  $calc-vw: ($slope * 100) * 1vw;
  @return clamp($min-unit, $calc-rem + $calc-vw, $max-unit);
}

// 参考：https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
